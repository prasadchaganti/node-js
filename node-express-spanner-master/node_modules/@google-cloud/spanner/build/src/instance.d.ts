/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
declare const common: any;
/**
 * The {@link Instance} class represents a [Cloud Spanner
 * instance](https://cloud.google.com/spanner/docs/instances).
 *
 * Create an `Instance` object to interact with a Cloud Spanner instance.
 *
 * @class
 *
 * @param {Spanner} spanner {@link Spanner} instance.
 * @param {string} name Name of the instance.
 *
 * @example
 * const {Spanner} = require('@google-cloud/spanner');
 * const spanner = new Spanner();
 * const instance = spanner.instance('my-instance');
 */
declare class Instance extends common.ServiceObject {
    constructor(spanner: any, name: any);
    /**
     * Config for the new database.
     *
     * @typedef {object} CreateDatabaseRequest
     * @property {SessionPoolOptions} [poolOptions]
     * @property {SessionPoolCtor} [poolCtor]
     */
    /**
     * @typedef {array} CreateDatabaseResponse
     * @property {Database} 0 The new {@link Database}.
     * @property {Operation} 1 An {@link Operation} object that can be used to check
     *     the status of the request.
     * @property {object} 2 The full API response.
     */
    /**
     * @callback CreateDatabaseCallback
     * @param {?Error} err Request error, if any.
     * @param {Database} database The new {@link Database}.
     * @param {Operation} operation An {@link Operation} object that can be used to
     *     check the status of the request.
     * @param {object} apiResponse The full API response.
     */
    /**
     * Create a database in this instance.
     *
     * Wrapper around {@link v1.DatabaseAdminClient#createDatabase}.
     *
     * @see {@link v1.DatabaseAdminClient#createDatabase}
     * @see [CreateDatabase API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.admin.database.v1#google.spanner.admin.database.v1.DatabaseAdmin.CreateDatabase)
     *
     * @throws {Error} If a name is not provided.
     *
     * @param {name} name The name of the database to create.
     * @param {CreateDatabaseRequest} [options] Configuration object.
     * @param {CreateDatabaseCallback} [callback] Callback function.
     * @returns {Promise<CreateDatabaseResponse>}
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     *
     * function callback(err, database, operation, apiResponse) {
     *   if (err) {
     *     // Error handling omitted.
     *   }
     *
     *   operation
     *     .on('error', function(err) {})
     *     .on('complete', function() {
     *       // Database created successfully.
     *     });
     * }
     *
     * instance.createDatabase('new-database-name', callback);
     *
     * //-
     * // Set the schema for the database.
     * //-
     * instance.createDatabase('new-database-name', {
     *   schema:
     *     'CREATE TABLE Singers (' +
     *     '  SingerId STRING(1024) NOT NULL,' +
     *     '  Name STRING(1024),' +
     *     ') PRIMARY KEY(SingerId)'
     * }, callback);
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * instance.createDatabase('new-database-name')
     *   .then(function(data) {
     *     const database = data[0];
     *     const operation = data[1];
     *     return operation.promise();
     *   })
     *   .then(function() {
     *     // Database created successfully.
     *   });
     *
     * @example <caption>include:samples/schema.js</caption>
     * region_tag:spanner_create_database
     * Full example:
     */
    createDatabase(name: any, options?: any, callback?: any): void;
    /**
     * Get a reference to a Database object.
     *
     * @throws {Error} If a name is not provided.
     *
     * @param {string} name The name of the instance.
     * @param {SessionPoolOptions|SessionPoolCtor} [poolOptions] Session pool
     *     configuration options.
     * @return {Database} A Database object.
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     * const database = instance.database('my-database');
     */
    database(name: any, poolOptions?: any): any;
    /**
     * @typedef {array} DeleteInstanceResponse
     * @property {object} 0 The full API response.
     */
    /**
     * @callback DeleteInstanceCallback
     * @param {?Error} err Request error, if any.
     * @param {object} apiResponse The full API response.
     */
    /**
     * Delete the instance.
     *
     * Wrapper around {@link v1.InstanceAdminClient#deleteInstance}.
     *
     * @see {@link v1.InstanceAdminClient#deleteInstance}
     * @see [DeleteInstance API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.admin.instance.v1#google.spanner.admin.instance.v1.InstanceAdmin.DeleteInstance)
     *
     * @param {DeleteInstanceCallback} [callback] Callback function.
     * @returns {Promise<DeleteInstanceResponse>}
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     *
     * instance.delete(function(err, apiResponse) {
     *   if (err) {
     *     // Error handling omitted.
     *   }
     *
     *   // Instance was deleted successfully.
     * });
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * instance.delete().then(function(data) {
     *   const apiResponse = data[0];
     * });
     */
    delete(callback: any): void;
    /**
     * @typedef {array} InstanceExistsResponse
     * @property {boolean} 0 Whether the {@link Instance} exists.
     */
    /**
     * @callback InstanceExistsCallback
     * @param {?Error} err Request error, if any.
     * @param {boolean} exists Whether the {@link Instance} exists.
     */
    /**
     * Check if an instance exists.
     *
     * @method Instance#exists
     * @param {InstanceExistsCallback} [callback] Callback function.
     * @returns {Promise<InstanceExistsResponse>}
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     *
     * instance.exists(function(err, exists) {});
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * instance.exists().then(function(data) {
     *   const exists = data[0];
     * });
     */
    exists(callback: any): void;
    /**
     * @typedef {array} GetInstanceResponse
     * @property {Instance} 0 The {@link Instance}.
     * @property {object} 1 The full API response.
     */
    /**
     * @callback GetInstanceCallback
     * @param {?Error} err Request error, if any.
     * @param {Instance} instance The {@link Instance}.
     * @param {object} apiResponse The full API response.
     */
    /**
     * Get an instance if it exists.
     *
     * You may optionally use this to "get or create" an object by providing an
     * object with `autoCreate` set to `true`. Any extra configuration that is
     * normally required for the `create` method must be contained within this
     * object as well.
     *
     * @param {options} [options] Configuration object.
     * @param {boolean} [options.autoCreate=false] Automatically create the
     *     object if it does not exist.
     * @param {GetInstanceCallback} [callback] Callback function.
     * @returns {Promise<GetInstanceResponse>}
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     *
     * instance.get(function(err, instance, apiResponse) {
     *   // `instance.metadata` has been populated.
     * });
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * instance.get().then(function(data) {
     *   const instance = data[0];
     *   const apiResponse = data[0];
     * });
     */
    get(options: any, callback?: any): void;
    /**
     * Query object for listing databases.
     *
     * @typedef {object} GetDatabasesRequest
     * @property {boolean} [autoPaginate=true] Have pagination handled
     *     automatically.
     * @property {number} [maxApiCalls] Maximum number of API calls to make.
     * @property {number} [maxResults] Maximum number of items to return.
     * @property {number} [pageSize] Maximum number of results per page.
     * @property {string} [pageToken] A previously-returned page token
     *     representing part of the larger set of results to view.
     */
    /**
     * @typedef {array} GetDatabasesResponse
     * @property {Database[]} 0 Array of {@link Database} instances.
     * @property {object} 1 The full API response.
     */
    /**
     * @callback GetDatabasesCallback
     * @param {?Error} err Request error, if any.
     * @param {Database[]} databases Array of {@link Database} instances.
     * @param {object} apiResponse The full API response.
     */
    /**
     * Get a list of databases.
     *
     * Wrapper around {@link v1.DatabaseAdminClient#listDatabases}.
     *
     * @see {@link v1.DatabaseAdminClient#listDatabases}
     * @see [ListDatabases API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.admin.database.v1#google.spanner.admin.database.v1.DatabaseAdmin.ListDatabases)
     *
     * @param {GetDatabasesRequest} [query] Query object for listing databases.
     * @param {GetDatabasesCallback} [callback] Callback function.
     * @returns {Promise<GetDatabasesResponse>}
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     *
     * instance.getDatabases(function(err, databases) {
     *   // `databases` is an array of `Database` objects.
     * });
     *
     * //-
     * // To control how many API requests are made and page through the results
     * // manually, set `autoPaginate` to `false`.
     * //-
     * function callback(err, databases, nextQuery, apiResponse) {
     *   if (nextQuery) {
     *     // More results exist.
     *     instance.getDatabases(nextQuery, callback);
     *   }
     * }
     *
     * instance.getDatabases({
     *   autoPaginate: false
     * }, callback);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * instance.getDatabases().then(function(data) {
     *   const databases = data[0];
     * });
     */
    getDatabases(query: any, callback?: any): void;
    /**
     * @typedef {array} GetInstanceMetadataResponse
     * @property {object} 0 The {@link Instance} metadata.
     * @property {object} 1 The full API response.
     */
    /**
     * @callback GetInstanceMetadataCallback
     * @param {?Error} err Request error, if any.
     * @param {object} metadata The {@link Instance} metadata.
     * @param {object} apiResponse The full API response.
     */
    /**
     * Get the instance's metadata.
     *
     * Wrapper around {@link v1.InstanceAdminClient#getInstance}.
     *
     * @see {@link v1.InstanceAdminClient#getInstance}
     * @see [GetInstance API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.admin.instance.v1#google.spanner.admin.instance.v1.InstanceAdmin.GetInstance)
     *
     * @param {GetInstanceMetadataCallback} [callback] Callback function.
     * @returns {Promise<GetInstanceMetadataResponse>}
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     *
     * instance.getMetadata(function(err, metadata, apiResponse) {});
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * instance.getMetadata().then(function(data) {
     *   const metadata = data[0];
     *   const apiResponse = data[1];
     * });
     */
    getMetadata(callback: any): any;
    /**
     * Update the metadata for this instance. Note that this method follows PATCH
     * semantics, so previously-configured settings will persist.
     *
     * Wrapper around {@link v1.InstanceAdminClient#updateInstance}.
     *
     * @see {@link v1.InstanceAdminClient#updateInstance}
     * @see [UpdateInstance API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.admin.instance.v1#google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance)
     *
     * @param {object} metadata The metadata you wish to set.
     * @param {LongRunningOperationCallback} [callback] Callback function.
     * @returns {Promise<LongRunningOperationResponse>}
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     *
     * const metadata = {
     *   displayName: 'My Instance'
     * };
     *
     * instance.setMetadata(metadata, function(err, operation, apiResponse) {
     *   if (err) {
     *     // Error handling omitted.
     *   }
     *
     *   operation
     *     .on('error', function(err) {})
     *     .on('complete', function() {
     *       // Metadata updated successfully.
     *     });
     * });
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * instance.setMetadata(metadata).then(function(data) {
     *   const operation = data[0];
     *   const apiResponse = data[1];
     * });
     */
    setMetadata(metadata: any, callback?: any): any;
    /**
     * Format the instance name to include the project ID.
     *
     * @private
     *
     * @param {string} projectId The project ID.
     * @param {string} name The instance name.
     * @returns {string}
     *
     * @example
     * Instance.formatName_('grape-spaceship-123', 'my-instance');
     * // 'projects/grape-spaceship-123/instances/my-instance'
     */
    static formatName_(projectId: string, name: string): string;
}
/**
 * Reference to the {@link Instance} class.
 * @name module:@google-cloud/spanner.Instance
 * @see Instance
 */
export { Instance };
