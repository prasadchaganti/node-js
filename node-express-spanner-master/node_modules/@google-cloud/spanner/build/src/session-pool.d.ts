/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { EventEmitter } from 'events';
import PQueue from 'p-queue';
import * as trace from 'stack-trace';
import { Database } from './database';
import { Session, types } from './session';
import { Transaction } from './transaction';
/**
 * @callback SessionPoolCloseCallback
 * @param {?Error} error Closing error, if any.
 */
export interface SessionPoolCloseCallback {
    (error?: SessionLeakError): void;
}
/**
 * @callback GetReadSessionCallback
 * @param {?Error} error Request error, if any.
 * @param {Session} session The read-only session.
 */
export interface GetReadSessionCallback {
    (err: Error, session?: null): void;
    (err: null, session: Session): void;
}
/**
 * @callback GetWriteSessionCallback
 * @param {?Error} error Request error, if any.
 * @param {Session} session The read-write session.
 * @param {Transaction} transaction The transaction object.
 */
export interface GetWriteSessionCallback {
    (err: Error, session?: null, transaction?: null): void;
    (err: null, session: Session, transaction: Transaction): void;
}
/**
 * Interface for implementing custom session pooling logic, it should extend the
 * {@link https://nodejs.org/api/events.html|EventEmitter} class and emit any
 * asynchronous errors via an error event.
 *
 * @interface SessionPoolInterface
 * @extends external:{@link https://nodejs.org/api/events.html|EventEmitter}
 */
/**
 * @constructs SessionPoolInterface
 * @param {Database} database The database to create a pool for.
 */
export interface SessionPoolInterface extends EventEmitter {
    /**
     * Will be called via {@link Database#close}. Indicates that the pool should
     * perform any necessary teardown actions to its resources.
     *
     * @name SessionPoolInterface#close
     * @param {SessionPoolCloseCallback} callback The callback function.
     */
    close(callback: SessionPoolCloseCallback): void;
    /**
     * Will be called by the Database object, should be used to start creating
     * sessions/etc.
     *
     * @name SessionPoolInterface#open
     */
    open(): void;
    /**
     * When called returns a read-only session.
     *
     * @name SessionPoolInterface#getReadSession
     * @param {GetReadSessionCallback} callback The callback function.
     */
    getReadSession(callback: GetReadSessionCallback): void;
    /**
     * When called returns a read-write session with prepared transaction.
     *
     * @name SessionPoolInterface#getWriteSession
     * @param {GetWriteSessionCallback} callback The callback function.
     */
    getWriteSession(callback: GetWriteSessionCallback): void;
    /**
     * To be called when releasing a session back into the pool.
     *
     * @name SessionPoolInterface#release
     * @param {Session} session The session to be released.
     */
    release(session: Session): void;
}
/**
 * Session pool configuration options.
 *
 * @typedef {object} SessionPoolOptions
 * @property {number} [acquireTimeout=Infinity] Time in milliseconds before
 *     giving up trying to acquire a session. If the specified value is
 *     `Infinity`, a timeout will not occur.
 * @property {number} [concurrency=10] How many concurrent requests the pool is
 *     allowed to make.
 * @property {boolean} [fail=false] If set to true, an error will be thrown when
 *     there are no available sessions for a request.
 * @property {number} [idlesAfter=10] How long until a resource becomes idle, in
 *     minutes.
 * @property {number} [keepAlive=50] How often to ping idle sessions, in
 *     minutes. Must be less than 1 hour.
 * @property {Object<string, string>} [labels] Labels to apply to any session
 *     created by the pool.
 * @property {number} [max=100] Maximum number of resources to create at any
 *     given time.
 * @property {number} [maxIdle=1] Maximum number of idle resources to keep in
 *     the pool at any given time.
 * @property {number} [min=0] Minimum number of resources to keep in the pool at
 *     any given time.
 * @property {number} [writes=0.0] Percentage of sessions to be pre-allocated as
 *     write sessions represented as a float.
 */
export interface SessionPoolOptions {
    acquireTimeout?: number;
    concurrency?: number;
    fail?: boolean;
    idlesAfter?: number;
    keepAlive?: number;
    labels?: {
        [label: string]: string;
    };
    max?: number;
    maxIdle?: number;
    min?: number;
    writes?: number;
}
/**
 * Error to be thrown when attempting to release unknown resources.
 *
 * @private
 */
export declare class ReleaseError extends Error {
    resource: unknown;
    constructor(resource: unknown);
}
/**
 * Error to be thrown when session leaks are detected.
 *
 * @private
 */
export declare class SessionLeakError extends Error {
    messages: string[];
    constructor(leaks: string[]);
}
interface SessionInventory {
    [types.ReadOnly]: Session[];
    [types.ReadWrite]: Session[];
    borrowed: Set<Session>;
}
/**
 * Class used to manage connections to Spanner.
 *
 * **You don't need to use this class directly, connections will be handled for
 * you.**
 *
 * @class
 * @extends {EventEmitter}
 */
export declare class SessionPool extends EventEmitter implements SessionPoolInterface {
    database: Database;
    isOpen: boolean;
    options: SessionPoolOptions;
    _acquires: PQueue;
    _evictHandle: NodeJS.Timer;
    _inventory: SessionInventory;
    _onClose: Promise<void>;
    _pingHandle: NodeJS.Timer;
    _requests: PQueue;
    _traces: Map<string, trace.StackFrame[]>;
    /**
     * Formats stack trace objects into Node-like stack trace.
     *
     * @param {object[]} trace The trace object.
     * @return {string}
     */
    static formatTrace(frames: trace.StackFrame[]): string;
    /**
     * Total number of available sessions.
     * @type {number}
     */
    readonly available: number;
    /**
     * Total number of borrowed sessions.
     * @type {number}
     */
    readonly borrowed: number;
    /**
     * Flag to determine if Pool is full.
     * @type {boolean}
     */
    readonly isFull: boolean;
    /**
     * Total number of read sessions.
     * @type {number}
     */
    readonly reads: number;
    /**
     * Total size of pool.
     * @type {number}
     */
    readonly size: number;
    /**
     * Total number of write sessions.
     * @type {number}
     */
    readonly writes: number;
    /**
     * @constructor
     * @param {Database} database The DB instance.
     * @param {SessionPoolOptions} [options] Configuration options.
     */
    constructor(database: Database, options?: SessionPoolOptions);
    /**
     * Closes and the pool.
     *
     * @emits SessionPool#close
     * @param {SessionPoolCloseCallback} callback The callback function.
     */
    close(callback: SessionPoolCloseCallback): void;
    /**
     * Retrieve a read session.
     *
     * @param {GetReadSessionCallback} callback The callback function.
     */
    getReadSession(callback: GetReadSessionCallback): void;
    /**
     * Retrieve a read/write session.
     *
     * @param {GetWriteSessionCallback} callback The callback function.
     */
    getWriteSession(callback: GetWriteSessionCallback): void;
    /**
     * Opens the pool, filling it to the configured number of read and write
     * sessions.
     *
     * @emits SessionPool#open
     * @return {Promise}
     */
    open(): void;
    /**
     * Releases session back into the pool. If the session is a write session it
     * will also prepare a new transaction before releasing it.
     *
     * @throws {Error} For unknown sessions.
     * @emits SessionPool#available
     * @emits SessionPool#error
     * @param {Session} session The session to release.
     */
    release(session: Session): void;
    /**
     * Attempts to borrow a session from the pool.
     *
     * @private
     *
     * @param {string} type The desired type to borrow.
     * @returns {Promise<Session>}
     */
    _acquire(type: types): Promise<Session>;
    /**
     * Moves a session into the borrowed group.
     *
     * @private
     *
     * @param {Session} session The session object.
     */
    _borrow(session: Session): void;
    /**
     * Borrows session from specific group.
     *
     * @private
     *
     * @param {string} type The desired session type.
     * @return {Session}
     */
    _borrowFrom(type: types): Session;
    /**
     * Grabs the next available session.
     *
     * @private
     *
     * @param {string} type The desired session type.
     * @returns {Promise<Session>}
     */
    _borrowNextAvailableSession(type: types): Session;
    /**
     * Attempts to create a session of a certain type.
     *
     * @private
     *
     * @param {string} type The desired type to create.
     * @returns {Promise}
     */
    _createSession(type: types): Promise<void>;
    /**
     * Attempts to create a session but emits any errors that occur.
     *
     * @private
     *
     * @emits SessionPool#available
     * @emits SessionPool#error
     * @param {string} type The desired type to create.
     * @returns {Promise}
     */
    _createSessionInBackground(type: types): Promise<void>;
    /**
     * Attempts to delete a session, optionally creating a new one of the same
     * type if the pool is still open and we're under the configured min value.
     *
     * @private
     *
     * @fires SessoinPool#error
     * @param {Session} session The session to delete.
     * @returns {Promise}
     */
    _destroy(session: Session): Promise<void>;
    /**
     * Deletes idle sessions that exceed the maxIdle configuration.
     *
     * @private
     */
    _evictIdleSessions(): void;
    /**
     * Fills the pool with the minimum number of sessions.
     *
     * @return {Promise}
     */
    _fill(): Promise<void>;
    /**
     * Retrieves a list of all the idle sessions.
     *
     * @private
     *
     * @returns {Session[]}
     */
    _getIdleSessions(): Session[];
    /**
     * Returns stack traces for sessions that have not been released.
     *
     * @return {string[]}
     */
    _getLeaks(): string[];
    /**
     * Attempts to get a session of a specific type. If the type is unavailable it
     * may try to use a different type.
     *
     * @private
     *
     * @param {string} type The desired session type.
     * @param {number} startTime Timestamp to use when determining timeouts.
     * @returns {Promise<Session>}
     */
    _getSession(type: types, startTime: number): Promise<Session>;
    /**
     * Checks to see whether or not session is expired.
     *
     * @param {Session} session The session to check.
     * @returns {boolean}
     */
    _isValidSession(session: Session): boolean;
    /**
     * Pings an individual session.
     *
     * @private
     *
     * @param {Session} session The session to ping.
     * @returns {Promise}
     */
    _ping(session: Session): Promise<void>;
    /**
     * Makes a keep alive request to all the idle sessions.
     *
     * @private
     *
     * @returns {Promise}
     */
    _pingIdleSessions(): Promise<void>;
    /**
     * Creates a transaction for a session.
     *
     * @private
     *
     * @param {Session} session The session object.
     * @param {object} options The transaction options.
     * @returns {Promise}
     */
    _prepareTransaction(session: Session): Promise<void>;
    /**
     * Releases a session back into the pool.
     *
     * @private
     *
     * @fires SessionPool#available
     * @param {Session} session The session object.
     */
    _release(session: Session): void;
    /**
     * Starts housekeeping (pinging/evicting) of idle sessions.
     *
     * @private
     */
    _startHouseKeeping(): void;
    /**
     * Stops housekeeping.
     *
     * @private
     */
    _stopHouseKeeping(): void;
}
export {};
